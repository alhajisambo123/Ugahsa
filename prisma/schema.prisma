// // This is your Prisma schema file,
// // learn more about it in the docs: https://pris.ly/d/prisma-schema

// // Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// // Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}


// model Account {
//   id                String  @id @default(cuid()) @map("_id")
//   userId            String
//   type              String
//   provider          String
//   providerAccountId String
//   refresh_token     String?
//   access_token      String?
//   expires_at        Int?
//   token_type        String?
//   scope             String?
//   id_token          String?
//   session_state     String?

//   user User @relation(fields: [userId], references: [id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid()) @map("_id")
//   sessionToken String   @unique
//   userId       String
//   expires      DateTime
//   user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid()) @map("_id")
//   name          String?
//   email         String    @unique
//   emailVerified DateTime?
//   image         String?
//   accounts      Account[]
//   sessions      Session[]
//   Post          Post[]
//   Activity     Activity[]

//   Comment       Comment[]
// }

// model VerificationToken {
//   identifier String   @id @map("_id")
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }

// model Category {
//   id    String  @id @default(cuid()) @map("_id")
//   slug  String  @unique
//   title String
//   img   String?
//   Posts Post[]
//     Activitys Activity[]

// }

// model Post {
//   id        String    @id @default(cuid()) @map("_id")
//   createdAt DateTime  @default(now())
//   slug      String    @unique
//   title     String
//   desc      String
//   img       String?
//   views     Int       @default(0)
//   catSlug   String
//   cat       Category  @relation(fields: [catSlug], references: [slug])
//   userEmail String
//   user      User      @relation(fields: [userEmail], references: [email])
//   comments  Comment[]
// }

// model Comment {
//   id        String   @id @default(cuid()) @map("_id")
//   createdAt DateTime @default(now())
//   desc      String
//   userEmail String
//   user      User     @relation(fields: [userEmail], references: [email])
//   postSlug  String
//   post      Post     @relation(fields: [postSlug], references: [slug])
//     activity      Activity     @relation(fields: [postSlug], references: [slug])



// }

// model Activity {
//   id        String    @id @default(cuid()) @map("_id")
//   createdAt DateTime  @default(now())
//   slug      String    @unique
//   title     String
//   desc      String
//   img       String?
//   views     Int       @default(0)
//   userEmail String
//     catSlug   String

//   comments  Comment[]
//     user      User      @relation(fields: [userEmail], references: [email])
//   cat       Category  @relation(fields: [catSlug], references: [slug])

// }

model Account {
  id                String  @id @default(cuid()) @map("_id")
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid()) @map("_id")
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid()) @map("_id")
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  activities    Activity[]
  comments      Comment[]
}

model VerificationToken {
  identifier String   @id @map("_id")
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id         String    @id @default(cuid()) @map("_id")
  slug       String    @unique
  title      String
  img        String?
  posts      Post[]
  activities Activity[]
}

model Post {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  slug      String    @unique
  title     String
  desc      String
  img       String?
  views     Int       @default(0)
  catSlug   String
  cat       Category  @relation(fields: [catSlug], references: [slug])
  userEmail String
  user      User      @relation(fields: [userEmail], references: [email])
  comments  Comment[]
}

model Comment {
  id           String   @id @default(cuid()) @map("_id")
  createdAt    DateTime @default(now())
  desc         String
  userEmail    String
  user         User     @relation(fields: [userEmail], references: [email])
  postSlug     String?  // Nullable if the comment is on an activity
  post         Post?    @relation(fields: [postSlug], references: [slug])
  activitySlug String?  // Nullable if the comment is on a post
  activity     Activity? @relation(fields: [activitySlug], references: [slug])
}

model Activity {
  id        String    @id @default(cuid()) @map("_id")
  createdAt DateTime  @default(now())
  slug      String    @unique
  title     String
  desc      String
  img       String?
  views     Int       @default(0)
  userEmail String
  catSlug   String
  user      User      @relation(fields: [userEmail], references: [email])
  cat       Category  @relation(fields: [catSlug], references: [slug])
  comments  Comment[]
}
